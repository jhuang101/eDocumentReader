

@{
    ViewBag.Title = "The Little Frog";
}

<div class="container">
    <input type="hidden" id="displayname" />
    <input type="hidden" id="textcopy" />
</div>
@section scripts {
    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.2.0.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <script src="~/Scripts/easeljs-0.7.1.min.js"></script>
    <script src="~/Scripts/tweenjs-0.5.1.min.js"></script>
    <script src="~/Scripts/movieclip-0.7.1.min.js"></script>
    <script src="~/Scripts/preloadjs-0.4.1.min.js"></script>
    <script src="~/Scripts/adapter.js"></script>
    <script src="~/Scripts/common.js"></script>
    <script src="~/Scripts/ga.js"></script>
    <script src="~/Content/stories/TheLittleFrog/TheLittleFrog_HTML5.js"></script>
    <!--SignalR script to update the chat page and send messages.-->
    <script>
        var eBook;
        var gestureIO;
        var sr;
        //var browserDisplay;
        var audioOut;

        var saveStoryText;
        $(function () {
            // Reference the auto-generated proxy for the hub.
            eBook = $.connection.eBookHub;
            gestureIO = $.connection.eBookGestureInputDevice;
            sr = $.connection.eBookSpeechRecognitionDevice;
            //browserDisplay = $.connection.eBookBrowserDisplayDevice;
            audioOut = $.connection.eBookAudioPlayer;
            //#######################################################
            //server call playAnimation to change scenes
            eBook.client.playAnimation = function (num) {
                switch (num) {
                    case 0:
                        exportRoot.s1_1.gotoAndPlay(0);
                        console.log("scene0");
                        break;
                    case 1:
                        exportRoot.gotoAndStop(1);
                        exportRoot.s1_1.gotoAndPlay(109);
                        console.log("scene1");
                        break;
                    case 2:
                        exportRoot.gotoAndStop(1);
                        exportRoot.s1_1.gotoAndPlay(110);
                        console.log("scene2");
                        break;
                    case 3:
                        exportRoot.gotoAndPlay(2);
                        console.log("scene3");
                        break;
                    case 4:
                        exportRoot.gotoAndStop(31);
                        exportRoot.instance_7.gotoAndPlay(11);
                        console.log("scene4");
                        break;
                    case 5:
                        exportRoot.gotoAndStop(31);
                        exportRoot.instance_7.gotoAndPlay(27);
                        console.log("scene5");
                        break;
                    case 6:
                        exportRoot.gotoAndStop(31);
                        exportRoot.instance_7.gotoAndPlay(95);
                        console.log("scene6");
                        break;
                    case 7:
                        exportRoot.gotoAndPlay(32);
                        console.log("scene7");
                        break;
                    case 8:
                        exportRoot.gotoAndStop(61);
                        exportRoot.instance_6.gotoAndPlay(3);
                        console.log("scene8");
                        break;
                    case 9:
                        exportRoot.gotoAndStop(61);
                        exportRoot.instance_6.gotoAndPlay(4);
                        console.log("scene9");
                        break;
                    case 10:
                        exportRoot.gotoAndStop(61);
                        exportRoot.instance_6.gotoAndPlay(6);
                        console.log("scene10");
                        break;
                    case 11:
                        exportRoot.gotoAndStop(61);
                        exportRoot.instance_6.gotoAndPlay(12);
                        console.log("scene11");
                        break;
                    case 12:
                        exportRoot.gotoAndStop(61);
                        exportRoot.instance_6.gotoAndPlay(14);
                        console.log("scene12");
                        break;
                    case 13:
                        exportRoot.gotoAndStop(61);
                        exportRoot.instance_6.gotoAndPlay(19);
                        console.log("scene13");
                        break;
                    case 14:
                        exportRoot.gotoAndStop(62);
                        exportRoot.instance_6.gotoAndPlay(21);
                        console.log("scene14");
                        break;
                    case 15:
                        exportRoot.gotoAndStop(61);
                        exportRoot.instance_6.gotoAndPlay(26);
                        console.log("scene15");
                        break;
                    case 16:
                        exportRoot.gotoAndStop(61);
                        exportRoot.instance_6.gotoAndPlay(31);
                        console.log("scene16");
                        break;
                    case 17:
                        exportRoot.gotoAndStop(61);
                        exportRoot.instance_6.gotoAndPlay(44);
                        console.log("scene17");
                        break;
                    case 18:
                        exportRoot.gotoAndStop(61);
                        exportRoot.instance_6.gotoAndPlay(88);
                        console.log("scene18");
                        break;
                    case 19:
                        exportRoot.gotoAndPlay(62);
                        console.log("scene19");
                        break;
                    case 20:
                        exportRoot.gotoAndStop(91);
                        exportRoot.instance_5.gotoAndPlay(2);
                        console.log("scene20");
                        break;
                    case 21:
                        exportRoot.gotoAndStop(91);
                        exportRoot.instance_5.gotoAndPlay(149);
                        console.log("scene21");
                        break;
                    case 22:
                        exportRoot.gotoAndPlay(92);
                        console.log("scene22");
                        break;
                    case 23:
                        exportRoot.gotoAndPlay(122);
                        console.log("scene23");
                        break;
                    case 24:
                        exportRoot.gotoAndStop(151);
                        exportRoot.instance_3.gotoAndPlay(80);
                        console.log("scene24");
                        break;
                    case 25:
                        exportRoot.gotoAndStop(151);
                        exportRoot.instance_3.gotoAndPlay(195);
                        console.log("scene25");
                        break;
                    case 26:
                        exportRoot.gotoAndStop(151);
                        exportRoot.instance_3.gotoAndPlay(378);
                        console.log("scene26");
                        break;
                    case 27:
                        exportRoot.gotoAndPlay(152);
                        console.log("scene27");
                        break;
                    case 28:
                        exportRoot.gotoAndStop(181);
                        exportRoot.instance_2.gotoAndPlay(9);
                        console.log("scene28");
                        break;
                    case 29:
                        exportRoot.gotoAndStop(181);
                        exportRoot.instance_2.gotoAndPlay(27);
                        console.log("scene29");
                        break;
                    case 30:
                        exportRoot.gotoAndStop(181);
                        exportRoot.instance_2.gotoAndPlay(46);
                        console.log("scene30");
                        break;
                    case 31:
                        exportRoot.gotoAndStop(181);
                        exportRoot.instance_2.gotoAndPlay(71);
                        console.log("scene31");
                        break;
                    case 32:
                        exportRoot.gotoAndStop(181);
                        exportRoot.instance_2.gotoAndPlay(82);
                        console.log("scene32");
                        break;
                    case 33:
                        exportRoot.gotoAndStop(181);
                        exportRoot.instance_2.gotoAndPlay(110);
                        console.log("scene33");
                        break;
                    case 34:
                        exportRoot.gotoAndStop(181);
                        exportRoot.instance_2.gotoAndPlay(124);
                        console.log("scene34");
                        break;
                    case 35:
                        exportRoot.gotoAndStop(181);
                        exportRoot.instance_2.gotoAndPlay(139);
                        console.log("scene35");
                        break;
                    case 36:
                        exportRoot.gotoAndPlay(211);
                        exportRoot.instance_1.gotoAndPlay(2);
                        console.log("scene36");
                        break;
                    case 37:
                        exportRoot.gotoAndPlay(212);
                        console.log("scene37");
                        break;
                    case 1000:
                        exportRoot.gotoAndStop(151);
                        exportRoot.instance_3.gotoAndPlay(379);
                        console.log("scene1000");
                        break;

                }
            };

            //enable or disable the acccept and reject button
            //the accept & reject button only display in "record my voice" mode
            eBook.client.disableAcceptRejectButton = function (b) {
                var ac = document.getElementById("accept_button");
                var re = document.getElementById("reject_button");
                if (ac != null )
                {
                    ac.disabled = b;
                }
                if (re != null) {
                    re.disabled = b;
                }
                console.log("set accept&reject buttons to " + b);
            };
            eBook.client.createAcceptRejectButtons = function () {
                constructAcceptRejectButtons();
            }
            eBook.client.createPauseResumeButton = function () {
                constructPauseResumeButton();
            }

            eBook.client.playAudio = function (path, type, index) {
                playAudioInBrowser(path, type,index);
            }
            eBook.client.resumeAudio = function () {
                resumeBrowserAudio();
            }
            eBook.client.pauseAudio = function () {
                pauseBrowserAudio();
            }
            
            //set the story text on the right of the screen
            eBook.client.setPageText = function (pageText, pageNum) {
                $("#discussion").html(pageText);
                if (pageNum >= 0) {
                    $("#page_number").html("page "+pageNum);
                }
            };

            //called by the server. 
            //folder with the same name already exist, ask the user
            //to override the exist data, or use different name.
            eBook.client.voiceDirExist = function () {
                var conf = confirm("Looks like the name you entered already exist.\n Do you want to overwrite with the existing data?");
                if (conf) {
                    gestureIO.server.overwriteAndRecord();
                }
            };
            //called by the server to construct the story selection panel
            eBook.client.chooseStory = function (arr) {
                constructSelectStoryPanel(arr);
            }

            //called by the server to construct the voice selection panel
            eBook.client.chooseVoice = function (arr) {
                constructSelectVoicePath(arr);
            }
            //TEST ONLY
            //chat.client.timeFromServer = function(time) {
            //    chat.server.backToServer(time);
            //}
            //chat.client.timeBackToClient = function (time) {
            //    var d = new Date();
            //    var n = d.getTime();
            //    console.log("round time=" + (time - n));
            //}

            //called when the connect between client and the server has been established.
            $.connection.hub.start().done(function () {
                eBook.server.init();
            });

            //set the background of the right panel of the book
            eBook.client.setBackgroundImage = function (imageURL) {
                var sc = document.getElementById("storycell");
                sc.setAttribute("background", imageURL);
            }

            eBook.client.useBrowserAudio = function () {
                initializeBrowserAudio();
            }

        });
        // This optional function html-encodes messages for display in the page.
        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }

        //tell the server to flip to the previous page
        function goBack() {
            gestureIO.server.goBack();
        }

        //tell the server to flip to the next page
        function goNext() {
            gestureIO.server.goNext();
        }

        //tell the server that the user select the 'read it now' mode
        function realTime() {
            gestureIO.server.realTimeMode();
            constructNavigationButtons();
            //gestureIO.server.callMeTest();
        }

        function selectStory(story) {
            if (story == null) {
                var myselect = document.getElementById("select_story");
                story = myselect.options[myselect.selectedIndex].value;
            }
            if (story != null) {
                gestureIO.server.setStory(story);
                //$("#title").html("<center><h2>"+story+"</h2></center>");
                init();
                constructMainStoryButtons();
            }
        }
        function changeVoice(voice) {
            if (voice == null) {
                var myVoice = document.getElementById("select_voice");
                voice = myVoice.options[myVoice.selectedIndex].value;
            }
            if (voice != null) {
                gestureIO.server.setVoice(voice);
            }
        }

        function constructSelectStoryPanel(arr) {
            var selection = document.createElement("select");
            selection.setAttribute("id", "select_story");
            for (i = 0; i < arr.length; i++) {
                var op = new Option();
                op.value = arr[i];
                op.text = arr[i];
                selection.options.add(op);
            }

            var sb = document.getElementById("discussion");
            sb.innerHTML = '<h2>Please select a story:</h2><br/>';
            sb.appendChild(selection);

            var button = document.createElement("input");
            button.setAttribute("type", "button");
            button.setAttribute("value", "Submit");
            button.setAttribute("name", "submit");
            button.setAttribute("onClick", "selectStory();");
            sb.appendChild(button);

        }

        function constructSelectVoicePath(voiceList) {
            //remove all from discussion
            $("#discussion").html("");
            console.log(voiceList);
            var selection = document.createElement("select");
            selection.setAttribute("id", "select_voice");
            var op = new Option();
            op.value = "";
            op.text = "";
            selection.options.add(op);
            for (i = 0; i < voiceList.length; i++) {
                var op = new Option();
                op.value = voiceList[i];
                op.text = voiceList[i];
                selection.options.add(op);
            }
            var ob = document.getElementById("discussion");
            ob.appendChild(selection);

            var button = document.createElement("input");
            button.setAttribute("type", "button");
            button.setAttribute("value", "Go");
            button.setAttribute("name", "submit");
            button.setAttribute("onClick", "changeVoice();");
            ob.appendChild(button);
        }

        function constructNavigationButtons() {
            var ob = document.getElementById("navigate_buttons1");
            if (ob.getElementsByTagName("input") != null) {
                var element = document.createElement("input");
                element.setAttribute("type", "button");
                element.setAttribute("value", "<< Back");
                element.setAttribute("name", "back");
                element.setAttribute("onClick", "goBack();");
                ob.appendChild(element);
            }
            var ob2 = document.getElementById("navigate_buttons2");
            if (ob2.getElementsByTagName("input") != null) {
                var element2 = document.createElement("input");
                element2.setAttribute("type", "button");
                element2.setAttribute("value", "Next >>");
                element2.setAttribute("name", "next");
                element2.setAttribute("onClick", "goNext();");
                ob2.appendChild(element2);
            }
        }

        function constructMainStoryButtons() {
            //remove all from discussion
            $("#discussion").html("");

            var element = document.createElement("input");
            element.setAttribute("type", "button");
            element.setAttribute("value", "I'll read it now");
            element.setAttribute("id", "real-time");
            element.setAttribute("onClick", "realTime();");
            element.disabled = true;

            var ob = document.getElementById("discussion");
            ob.appendChild(element);
            var blankLine0 = document.createElement("br");
            var blankLine1 = document.createElement("br");
            ob.appendChild(blankLine0);
            ob.appendChild(blankLine1);
            ///
            var element3 = document.createElement("input");
            element3.setAttribute("type", "button");
            element3.setAttribute("value", "Record my voice");
            element3.setAttribute("id", "record");
            element3.setAttribute("onClick", "constructRecordStoryPanel();");
            element3.disabled = true;
            ob.appendChild(element3);
            //

            var blankLine2 = document.createElement("br");
            var blankLine3 = document.createElement("br");
            ob.appendChild(blankLine2);
            ob.appendChild(blankLine3);

            var element2 = document.createElement("input");
            element2.setAttribute("type", "button");
            element2.setAttribute("value", "Use recorded voice");
            element2.setAttribute("id", "replay");
            element2.setAttribute("onClick", "replayVoice();");
            element2.disabled = true;
            ob.appendChild(element2);
        }

        function replayVoice() {
            gestureIO.server.replayMode();
            //setInterval(function () {
            //    var d = new Date();
            //    var n = d.getTime();
                //TEST ONLY
            //    chat.server.roundTimeTestClient(n);
            //}, 250);

        }

        function constructRecordStoryPanel() {
            $("#discussion").html("<h2>What is the name of the voice:</h2>");

            var element = document.createElement("input");
            element.setAttribute("type", "text");
            element.setAttribute("id", "storyNameInput");
            var ob = document.getElementById("discussion");
            ob.appendChild(element);

            var element3 = document.createElement("input");
            element3.setAttribute("type", "button");
            element3.setAttribute("value", "Go");
            element3.setAttribute("id", "useThisName");
            element3.setAttribute("onClick", "setRecordName();");
            ob.appendChild(element3);
        }

        function constructAcceptRejectButtons() {
            var ob = document.getElementById("controlButton");

            var acceptBtn = document.createElement("input");
            acceptBtn.setAttribute("id", "accept_button");
            acceptBtn.setAttribute("type", "button");
            acceptBtn.setAttribute("value", "Accept");
            acceptBtn.setAttribute("style", "font-size:18px; width:98px; height:40px");
            acceptBtn.setAttribute("onClick", "acceptSpeech();");
            acceptBtn.disabled = true;
            ob.appendChild(acceptBtn);

            var rejectBtn = document.createElement("input");
            rejectBtn.setAttribute("id", "reject_button");
            rejectBtn.setAttribute("type", "button");
            rejectBtn.setAttribute("value", "Reject");
            rejectBtn.setAttribute("style", "font-size:18px; width:98px; height:40px");
            rejectBtn.setAttribute("onClick", "rejectSpeech();");
            rejectBtn.disabled = true;

            ob.appendChild(rejectBtn);
        }

        function constructPauseResumeButton() {
            $("#discussion").html("");
            var ob = document.getElementById("controlButton");

            var acceptBtn = document.createElement("input");
            acceptBtn.setAttribute("id", "pauseResume_button");
            acceptBtn.setAttribute("type", "button");
            acceptBtn.setAttribute("value", "Pause");
            acceptBtn.setAttribute("style", "font-size:18px; width:98px; height:40px");
            acceptBtn.setAttribute("onClick", "pauseReplay();");
            acceptBtn.disabled = false;
            ob.appendChild(acceptBtn);
        }

        

        function acceptSpeech() {
            gestureIO.server.acceptSpeech();
            var oba = document.getElementById("accept_button");
            oba.disabled = true;
            var obd = document.getElementById("reject_button");
            obd.disabled = true;
        }
        function rejectSpeech() {
            gestureIO.server.rejectSpeech();
            var oba = document.getElementById("accept_button");
            oba.disabled = true;
            var obd = document.getElementById("reject_button");
            obd.disabled = true;
        }

        function pauseReplay() {
            gestureIO.server.pause();
            //pauseBrowserAudio();
            var oba = document.getElementById("pauseResume_button");
            oba.setAttribute("value", "Resume");
            oba.setAttribute("onClick", "resumeReplay();")
        }

        function resumeReplay() {
            gestureIO.server.resume();
            //resumeBrowserAudio();
            var oba = document.getElementById("pauseResume_button");
            oba.setAttribute("value", "Pause");
            oba.setAttribute("onClick", "pauseReplay();")
        }



        function setRecordName() {
            var field = document.getElementById("storyNameInput");
            var value = field.value;
            if (value) {
                var specialC = false;
                var iChars = "~`!#$%^&*+=-[]\\\';,/{}|\":<>?";

                for (var i = 0; i < value.length; i++) {
                    if (iChars.indexOf(value.charAt(i)) != -1) {
                        specialC = true;
                    }
                }

                if (!specialC) {
                    gestureIO.server.record(value);
                }
                else {
                    alert("Special characters are not allowed\n");
                }
            }
        }

        function playAudioInBrowser(path, type, index) {
            console.debug("trying to play " + path);
            var ac = document.getElementById("audioControl");
            ac.setAttribute("src", path);
            ac.setAttribute("type", type);
            ac.setAttribute("onended", "audioFinished("+index+");");
            
            ac.play();
        }
        function resumeBrowserAudio() {
            var ac = document.getElementById("audioControl");
            console.debug("resuming audio ");
            ac.play();
        }
        function pauseBrowserAudio() {
            var ac = document.getElementById("audioControl");
            console.debug("pausing audio ");
            ac.pause();
        }
        function audioFinished(index) {
            console.debug("finish playing audio:"+index);
            audioOut.server.finishPlayingAudio(index);
        }
        function updateAudioTime(track) {
            audioOut.server.audioUpdateTime(track.currentTime);
        }


        //capture audio from browser************************************************************
        // Put variables in global scope to make them available to the browser console.
        var audio = document.querySelector('audio');
        var constraints = window.constraints = {
            audio: true,
            video: false
        };

        var script;


        try {
            window.AudioContext = window.AudioContext || window.webkitAudioContext;
            window.audioContext = new AudioContext();
        } catch (e) {
            alert('Web Audio API not supported.');
        }
        //use streamIndex to keep track the order of each stream
        var streamIndex = 0;
        function successCallback(stream) {
            var audioTracks = stream.getAudioTracks();
            console.log('Got stream with constraints:', constraints);
            console.log('Using audio device: ' + audioTracks[0].label);
            sr.server.updateStreamIndex(streamIndex);
            stream.onended = function () {
                console.log('Stream ended');
            };
            //console.log("sample rate:" + window.audioContext.sampleRate);
            //window.stream = stream; // make variable available to browser console
            //audio.srcObject = stream;
            script = window.audioContext.createScriptProcessor(2048, 1, 1); //16384
            script.onaudioprocess = function (event) {
                var input = event.inputBuffer.getChannelData(0);
                var array = JSON.parse("[" + input + "]");
                sr.server.updateStream(array, streamIndex);
                streamIndex++;

            }

            var mic = window.audioContext.createMediaStreamSource(stream);
            mic.connect(script);
            script.connect(window.audioContext.destination);

        }

        function errorCallback(error) {
            console.log('navigator.getUserMedia error: ', error);
        }

        function initializeBrowserAudio() {
            navigator.getUserMedia(constraints, successCallback, errorCallback);
        }
        
        //end **********************************************************************************
        //start building story animation########################################################
        var canvas, stage, exportRoot;
        var loadComplete;

        function init() {
            createjs.MotionGuidePlugin.install();

            canvas = document.getElementById("canvas");
            images = images || {};

            var loader = new createjs.LoadQueue(false);
            loader.addEventListener("fileload", handleFileLoad);
            loader.addEventListener("complete", handleComplete);
            loader.loadManifest(lib.properties.manifest);

        }

        function handleFileLoad(evt) {
            loadComplete = false;
            if (evt.item.type == "image") { images[evt.item.id] = evt.result; }
        }

        function handleComplete() {
            loadComplete = true;
            display();
            var ob = document.getElementById("real-time");
            ob.disabled = false;
            var ob2 = document.getElementById("record");
            ob2.disabled = false;
            var ob3 = document.getElementById("replay");
            ob3.disabled = false;
        }
        function display() {
            if (loadComplete) {
                exportRoot = new lib.TheLittleFrog_HTML5();

                stage = new createjs.Stage(canvas);
                stage.addChild(exportRoot);
                stage.update();

                createjs.Ticker.setFPS(lib.properties.fps);
                createjs.Ticker.addEventListener("tick", stage);
            }
        }
        //end####################################################################################

    </script>


}
<!--TODO: move this to a CSS file?-->
<style type="text/css">

    canvas{
        position:center;
    }
    .storytext{
        color:black;
        font-family:"Times New Roman";
        font-weight:bold;
        font-size:200%;
    }
    .highlight{
        border-bottom: 2px solid #0000ff;
    }
    .hypothesis{
        border-bottom: 2px solid #8888ff;
    }
    .lookAhead{
        border-bottom: 2px solid #8888ff;
    }
    .navigate1 {
        position: relative;
    }
    .navigate2{
	    position:relative;
    }
    .pageNum{
	    position:relative;  
    }
    .ctrlBtnClass{
        position:relative;
    }
    table,tr,td{
        border:0px;
    }

</style>
<body style="background-color:#D4D4D4">
    <audio id="audioControl" ontimeupdate="updateAudioTime(this);" ></audio>    
<!--<body onload="init();" style="background-color:#D4D4D4">-->
    <table>
        <tr>
            <td rowspan="2" style="width:600px; height:800px">
                <canvas id="canvas" width="600" height="800" style="background-color:#FFFFFF; width:100%;height:100%"></canvas>
            </td>
            <td colspan="3" align="center" id="storycell" style="width:600px; height:750px" background="/Content/stories/TheLittleFrog/images/bg_1.png">
                <div id="discussion"></div>
            </td>
        </tr>
        <tr style="width:600px; height:50px" background="/Content/stories/TheLittleFrog/images/bg_1.png">
            <td align="center"><span id="navigate_buttons1" class="navigate1" /></td>
            <td align="center"><span id="page_number" class="pageNum" /></td>
            <td align="center"><span id="navigate_buttons2" class="navigate2" /></td>
        </tr>
        <tr>
            <td></td>
            <td colspan="3" align="center"><span id="controlButton" class="ctrlBtnClass" /></td>
        </tr>
    </table>
    </body>